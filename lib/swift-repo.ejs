//
//  <%- meta.prefix %><%- meta.objcModelName %>Repository.swift
//  <%- meta.appName %>
//
//  Created by Technologies Generator Tools on <%- meta.date %>.
//  Copyright Â© <%- meta.year %> Arrive Technologies. All rights reserved.
//

import Foundation
import SwiftyJSON

class <%- meta.prefix %><%- meta.objcModelName %>Repository: ALBaseModel {

  convenience required init() {
    self.init(className: "<%- meta.objcModelName %>", prefix: "<%- meta.prefix %>", postfix: "<%- meta.postfix %>")
    self.repository(with: "<%- meta.pluralName %>")
  }

  func modelWithJson(data:JSON) -> <%- meta.prefix %><%- meta.objcModelName %><%- meta.postfix %> {
      return <%- meta.prefix %><%- meta.objcModelName %><%- meta.postfix %>(data: data)
  }

  <% meta.relationMode.forEach(function(model) {
    %>
    func model<%- model %>WithJson(data:JSON) -> <%- prefix %><%- model %><%- postfix %> {
      return <%- prefix %><%- model %><%- postfix %>(data: data)
    }
    <%
       });
    -%>

  override func contract() -> ALRESTContract? {
    let contract:ALRESTContract? = super.contract()

    <% meta.methods.forEach(function (method) {
      if (method.objcGenerated) {
    -%>
    contract?.add(ALRESTContractItem(pattern: "/\(className)<%- method.routes[0].path %>", verb: "<%- method.routes[0].verb.toUpperCase() %>"), forMethod: "\(className).<%- method.name %>")
  <%   }
    });
 -%>
    return contract
  }

<% meta.objcMethods.forEach(function(method) { -%>
  func <%- method.prototype %> {
    invokeStaticMethod("<%- method.rawName %>",
      parameters: <%- method.paramAssignments %>,
<% if (method.bodyParamAssignments) { -%>
      bodyParameters: <%- method.bodyParamAssignments %>, 
<% } -%>
      success: { value in
<% if (method.objcReturnType === meta.objcModelName) { -%>
        // Return model type
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(self.modelWithJson(data: value as! SwiftyJSON.JSON))
<% } else if (method.objcReturnType === 'NSDictionary') { -%>
        // Return object data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(value as! SwiftyJSON.JSON)
<% } else if (method.objcReturnType === 'NSArray') { -%>
        // Return array data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        var models = [Any]()
        if let arrayData = (value as! SwiftyJSON.JSON).array {
            for row in arrayData {
                models.append(self.modelWithJson(data: row))
            }
        }
        success(models)
<% } else if (method.objcReturnType === 'Bool') { -%>
        // Return bool data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(value as! SwiftyJSON.JSON)
<% } else if (method.objcReturnType === 'NSNumber') { -%>
        // Return number data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(value as! SwiftyJSON.JSON)
<% } else if (method.objcReturnType === 'void') { -%>
        // Return nothing
        success()
<% } -%>
      }, failure: failure)
    )
  }
<%
});
-%>
}
