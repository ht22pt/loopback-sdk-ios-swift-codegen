//
//  <%- meta.prefix %><%- meta.swiftModelName %>Repository.swift
//  <%- meta.appName %>
//
//  Created by Technologies Generator Tools on <%- meta.date %>.
//  Copyright Â© <%- meta.year %> Arrive Technologies. All rights reserved.
//

import Foundation
import SwiftyJSON

class <%- meta.prefix %><%- meta.swiftModelName %>Repository: ALBaseModel {

  convenience required init() {
    self.init(className: "<%- meta.swiftModelName %>", prefix: "<%- meta.prefix %>", postfix: "<%- meta.postfix %>")
    self.repository(with: "<%- meta.pluralName %>")
  }

  func modelWithJson(data:JSON) -> <%- meta.prefix %><%- meta.swiftModelName %><%- meta.postfix %> {
      return <%- meta.prefix %><%- meta.swiftModelName %><%- meta.postfix %>(data: data)
  }
<% meta.relationModel.forEach(function(model) {
%>
  func model<%- model %>WithJson(data:JSON) -> <%- meta.prefix %><%- model %><%- meta.postfix %> {
    return <%- meta.prefix %><%- model %><%- meta.postfix %>(data: data)
  }
<%
});
-%>

  override func contract() -> ALRESTContract? {
    let contract:ALRESTContract? = super.contract()

<% meta.methods.forEach(function (method) {
if (method.swiftGenerated) {
-%>
    contract?.add(ALRESTContractItem(pattern: "/\(className)<%- method.routes[0].path %>", verb: "<%- method.routes[0].verb.toUpperCase() %>"), forMethod: "\(className).<%- method.name %>")
<% }
});
-%>
    return contract
  }

<% meta.swiftMethods.forEach(function(method) { -%>

  func <%- method.prototype %> {
    invokeStaticMethod("<%- method.rawName %>",
      parameters: [ <%- method.paramAssignments %> ],
<% if (method.bodyParamAssignments) { -%>
      bodyParameters: <%- method.bodyParamAssignments %>.toDictionary(), 
<% } -%>
      success: { value in
<% if (method.swiftReturnType === meta.swiftModelName) { -%>
        // Return model type
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(self.modelWithJson(data: value as! SwiftyJSON.JSON))
<% } else if (meta.relationModel.indexOf(method.swiftReturnType) !== -1) { -%>
        // Return model type
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(self.model<%- method.swiftReturnType %>WithJson(data: value as! SwiftyJSON.JSON))
<% } else if (method.swiftReturnType === 'SwiftyJSON.JSON') { -%>
        // Return object data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success(value as! SwiftyJSON.JSON)
<% } else if (method.swiftReturnType === '[SwiftyJSON.JSON]') { -%>
        // Return array object data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        var models = [SwiftyJSON.JSON]()
        if let arrayData = (value as! SwiftyJSON.JSON).array {
            for row in arrayData {
                models.append(row)
            }
        }
        success(models)
<% } else if (method.swiftReturnType === 'Bool') { -%>
        // Return bool data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success((value as! SwiftyJSON.JSON)["<%- method.returnArg %>"].bool!)
<% } else if (method.swiftReturnType === 'String') { -%>
        // Return string data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success((value as! SwiftyJSON.JSON)["<%- method.returnArg %>"].string!)
<% } else if (method.swiftReturnType === 'NSNumber') { -%>
        // Return number data
        assert((value is SwiftyJSON.JSON), "Received non-Array: \(String(describing: value))")
        success((value as! SwiftyJSON.JSON)["<%- method.returnArg %>"].number!)
<% } else if (method.swiftReturnType === 'void') { -%>
        // Return nothing
        success()
<% } -%>
      }, failure: failure)
  }
<%
});
-%>
}
